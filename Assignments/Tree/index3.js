import React from 'react';
import PropTypes from 'prop-types';
import { TransitionGroup } from 'react-transition-group';
import { layout, select, behavior, event } from 'd3';
import clone from 'clone';
import deepEqual from 'deep-equal';
import uuid from 'uuid';

import Node from './Node';
import Link from './Link';
import './style.css';
import {connect} from 'react-redux';


import {pointf,UserToStore, ChapterToStore,CourseToStore,refreshfetch, Activate} from '../../actions/T_User';

var points;
class Tree extends React.Component {

constructor(props) {
super(props);
this.state = {
    initialRender: true,
    data: this.assignInternalProperties(clone(props.data)),
};
this.findNodesById = this.findNodesById.bind(this);
this.collapseNode = this.collapseNode.bind(this);
this.handleNodeToggle = this.handleNodeToggle.bind(this);
this.handleOnClickCb = this.handleOnClickCb.bind(this);
}


componentDidMount() {
// console.log(this.props.user, "THISPROPSUSER");
// console.log(JSON.parse(this.props.user.user.User.records[0][2]), "THISPROPSUSER");

// let user_V = JSON.parse(this.props.user.user.User.records[0][2]);




    this.bindZoomListener(this.props);
// TODO find better way of setting initialDepth, re-render here is suboptimal
this.setState({ initialRender: false }); // eslint-disable-line
}


componentWillReceiveProps(nextProps) {
// Clone new data & assign internal properties

// this.props.user.activator > 0 ? this.props.Activate() : null
// this.props.Activate;
if (!deepEqual(this.props.data, nextProps.data)) {
this.setState({
    data: this.assignInternalProperties(clone(nextProps.data)),
});
}
this.generateTree();

// If zoom-specific props change -> rebind listener with new values
                                    if (!deepEqual(this.props.translate, nextProps.translate)
|| !deepEqual(this.props.scaleExtent, nextProps.scaleExtent)) {
    this.bindZoomListener(nextProps);
}
}


/**
 * setInitialTreeDepth - Description
 *
 * @param {array} nodeSet Array of nodes generated by `generateTree`
 * @param {number} initialDepth Maximum initial depth the tree should render
 *
 * @return {void}
 */
setInitialTreeDepth(nodeSet, initialDepth) {
nodeSet.forEach((n) => {
    n._collapsed = n.depth >= initialDepth;
});
}


/**
 * bindZoomListener - If `props.zoomable`, binds a listener for
 * "zoom" events to the SVG and sets scaleExtent to min/max
 * specified in `props.scaleExtent`.
 *
 * @return {void}
 */
bindZoomListener(props) {
const { zoomable, scaleExtent, translate } = props;
const svg = select('.rd3t-svg');
const g = select('.rd3t-g');

if (zoomable) {
svg.call(behavior.zoom()
.scaleExtent([scaleExtent.min, scaleExtent.max])
.on('zoom', () => {
    g.attr('transform',
    `translate(${event.translate}) scale(${event.scale})`
);
})
// Offset so that first pan and zoom does not jump back to [0,0] coords
                                                                 .translate([translate.x, translate.y])
);
}
}


/**
 * assignInternalProperties - Assigns internal properties to each node in the
 * `data` set that are required for tree manipulation and returns
 * a new `data` array.
 *
 * @param {array} data Hierarchical tree data
 *
 * @return {array} `data` array with internal properties added
 */

assignInternalProperties(data) {
return data.map((node) => {



    node._collapsed = false;
// if there are children, recursively assign properties to them too
if (node.children && node.children.length > 0) {
    node.children = this.assignInternalProperties(node.children);
    node._children = node.children;
if (node.percentage ===100 ) {
// console.log(node._children, "node._children");
if (typeof node._children !== "undefined") {

    for (let i = 0; i < node._children.length; i++) {
    node._children[i].unlock = true;
}
}
else {}
}
}
return node;
});
}


/**
 * findNodesById - Description
 *
 * @param {string} nodeId The `node.id` being searched for
 * @param {array} nodeSet Array of `node` objects
 * @param {array} hits Accumulator for matches, passed between recursive calls
 *
 * @return {array} Set of nodes matching `nodeId`
 */
// TODO Refactor this into a more readable/reasonable recursive depth-first walk.
findNodesById(nodeId, nodeSet, hits) {
if (hits.length > 0) {
    return hits;
}

hits = hits.concat(nodeSet.filter((node) => node.id === nodeId));

nodeSet.forEach((node) => {
if (node._children && node._children.length > 0) {
    hits = this.findNodesById(nodeId, node._children, hits);

    return hits;
}
return hits;
});

return hits;
}


/**
 * collapseNode - Recursively sets the `_collapsed` property of
 * the passed `node` object and its children to `true`.
 *
 * @param {object} node Node object with custom properties
 *
 * @return {void}
 */
collapseNode(node) {
    node._collapsed = true;
if (node._children && node._children.length > 0) {
node._children.forEach((child) => {
    this.collapseNode(child);
});
}
}


/**
 * expandNode - Sets the `_collapsed` property of
 * the passed `node` object to `false`.
 *
 * @param {type} node Node object with custom properties
 *
 * @return {void}
 */
expandNode(node) {

    node._collapsed = false;

}


/**
 * handleNodeToggle - Finds the node matching `nodeId` and
 * expands/collapses it, depending on the current state of
 * its `_collapsed` property.
 * `setState` callback receives targetNode and handles
 * `props.onClick` if defined.
 *
 * @param {string} nodeId A node object's `id` field.
 *
 * @return {void}
 */
handleNodeToggle(nodeId) {
    const data = clone(this.state.data);
    const matches = this.findNodesById(nodeId, data, []);
    const targetNode = matches[0];

if (this.props.collapsible) {
    targetNode._collapsed
    ? this.expandNode(targetNode)
: this.collapseNode(targetNode);
this.setState({ data }, () => this.handleOnClickCb(targetNode));
} else {
      this.handleOnClickCb(targetNode);
  }
}


/**
 * handleOnClickCb - Handles the user-defined `onClick` function
 *
 * @param {object} targetNode Description
 *
 * @return {void}
 */
handleOnClickCb(targetNode) {
const { onClick } = this.props;
if (onClick && typeof onClick === 'function') {
onClick(clone(targetNode));
}
}


/**
 * generateTree - Generates tree elements (`nodes` and `links`) by
 * grabbing the rootNode from `this.state.data[0]`.
 * Restricts tree depth to `props.initialDepth` if defined and if this is
 * the initial render of the tree.
 *
 * @return {object} Object containing `nodes` and `links`.
 */
generateTree() {
const {
    initialDepth,
    depthFactor,
    separation,
    nodeSize,
    orientation,
} = this.props;

const tree = layout.tree()
.nodeSize(orientation === 'horizontal' ?
[nodeSize.y, nodeSize.x] :
                         [nodeSize.x, nodeSize.y]
)
.separation((a, b) => deepEqual(a.parent, b.parent) ?
separation.siblings :
separation.nonSiblings
)
.children((d) => d._collapsed ? null : d._children);

const rootNode = this.state.data[0];
const nodes = tree.nodes(rootNode);
const links = tree.links(nodes);
console.log(tree.links(nodes), 'LINKSz');
// set `initialDepth` on first render if specified
   if (initialDepth !== undefined && this.state.initialRender) {
    this.setInitialTreeDepth(nodes, initialDepth);
}

if (depthFactor) {
nodes.forEach((node) => { node.y = node.depth * depthFactor; });
}

return { nodes, links };
{/*<div  className={`rd3t-tree-container ${zoomable ? 'rd3t-grabbable' : undefined}`}>*/}
}

render() {
const { nodes, links } = this.generateTree();
const {
    percentage,
    orientation,
    translate,
    pathFunc,
    transitionDuration,
    zoomable,
    circleRadius,
    styles,
} = this.props;

return (

<svg      viewBox="0 0 2100 1300">
{/*<g transform="translate(-30 10)">*/}
<g transform="scale(1.2 1.2)">
<g transform="translate(-10 100)">


    <defs>

        <style>
            { `  .cls-1{isolation:isolate;}.cls-2,.cls-5,.cls-6,.cls-9{opacity:0.7;}.cls-13,.cls-2,.cls-3{mix-blend-mode:overlay;}.cls-10,.cls-11,.cls-13,.cls-4,.cls-6{fill:none;stroke:#3bfffe;}.cls-10,.cls-11,.cls-13,.cls-14,.cls-4,.cls-6{stroke-miterlimit:10;}.cls-4{stroke-width:0.85px;}.cls-12,.cls-5,.cls-7,.cls-8{fill:#3bfffe;}.cls-10,.cls-11,.cls-5,.cls-6,.cls-7,.cls-8,.cls-9{mix-blend-mode:soft-light;}.cls-6{stroke-width:0.9px;}.cls-8{opacity:0.5;}.cls-9{fill:#59bdeb;}.cls-10{stroke-width:1.8px;}.cls-11{stroke-width:1.25px;}.cls-13{stroke-width:1.34px;}.cls-14{fill:#30a5af;opacity:0.92;stroke:#231f20;stroke-linecap:round` }}
        </style>
        <linearGradient id="linear-gradient" x1="395.85" y1="231.25" x2="395.85" y2="561.86"
                        gradientUnits="userSpaceOnUse">
            <stop offset="0" stop-color="#a2ffff"/>
            <stop offset="0.19" stop-color="#91ffff" stop-opacity="0.87"/>
            <stop offset="0.61" stop-color="#66fffe" stop-opacity="0.53"/>
            <stop offset="1" stop-color="#3bfffe" stop-opacity="0.2"/>
        </linearGradient>
        <linearGradient id="linear-gradient-2" x1="541.36" y1="231.25" x2="541.36" y2="561.86"
                        href="#linear-gradient"/>
        <linearGradient id="linear-gradient-3" x1="253.25" y1="231.25" x2="253.25" y2="561.86"
                        href="#linear-gradient"/>
        <linearGradient id="linear-gradient-4" x1="251.17" y1="231.25" x2="251.17" y2="561.86"
                        href="#linear-gradient"/>
        <linearGradient id="linear-gradient-5" x1="395.95" y1="231.25" x2="395.95" y2="561.86"
                        href="#linear-gradient"/>
        <linearGradient id="linear-gradient-6" x1="543.53" y1="231.25" x2="543.53" y2="561.86"
                        href="#linear-gradient"/>
        <linearGradient id="linear-gradient-7" x1="190.41" y1="385.41" x2="616.31" y2="385.41"
                        gradientTransform="translate(-159.03 409.43) rotate(-45)" gradientUnits="userSpaceOnUse">
            <stop offset="0" stop-color="#fff"/>
            <stop offset="0.16" stop-color="#e5ffff" stop-opacity="0.87"/>
            <stop offset="0.5" stop-color="#a2ffff" stop-opacity="0.53"/>
            <stop offset="1" stop-color="#3bfffe" stop-opacity="0"/>
        </linearGradient>
        <radialGradient id="radial-gradient" cx="502.16" cy="137.53" r="231.43"
                        gradientTransform="translate(302.57 159.72) scale(0.46)" gradientUnits="userSpaceOnUse">
            <stop offset="0" stop-color="#fff"/>
            <stop offset="1" stop-color="#3bfffe" stop-opacity="0"/>
        </radialGradient>
        <radialGradient id="radial-gradient-2" cx="-147.49" cy="782.12" r="231.45"
                        gradientTransform="translate(275.49 301.32) scale(0.28)" href="#radial-gradient"/>
        <radialGradient id="radial-gradient-3" cx="914.68" cy="933.07" r="231.41"
                        gradientTransform="translate(222.88 204.68) scale(0.35)" href="#radial-gradient"/>
        <radialGradient id="radial-gradient-4" cx="186.44" cy="179.7" r="231.41"
                        gradientTransform="translate(206.75 210.22) scale(0.25)" href="#radial-gradient"/>
    </defs>
    <g transform="translate(420 -300) scale(2.1, 2.1)">
        <g class="cls-1">
            <g id="Objects">
                <g class="cls-2">
                    {/*<path class="cls-3"*/}
                          {/*d="M562.4,579a287.61,287.61,0,0,1-77.29,55.24l7.36,15.48A306.18,306.18,0,0,0,647.75,473.53L631.21,469A287.05,287.05,0,0,1,562.4,579Z"*/}
                          {/*transform="translate(-115.07 -121.65)"/>*/}
                    <path class="cls-4"
                          d="M627.62,547.66c-16.94,28.1-37.37,50.65-61.19,70.6l11.94,16.48C603.66,613.58,627,589,645,559.19c25-41.49,37.89-87.64,41.7-132.86l-18.77-2.06A287.15,287.15,0,0,1,627.62,547.66Z"
                          transform="translate(-115.07 -121.65)"/>
                    <path class="cls-5"
                          d="M213.13,250.8A287.93,287.93,0,0,1,283.57,187l-9.09-14.52a306.15,306.15,0,0,0-134,192.89l17,2.63A287.1,287.1,0,0,1,213.13,250.8Z"
                          transform="translate(-115.07 -121.65)"/>
                    <path class="cls-6"
                          d="M429.5,121.65l-6.64,35.22A245.17,245.17,0,0,1,643,447.5c14.21,2.65,26.85,4.85,35.16,6A280.87,280.87,0,0,0,429.5,121.65Z"
                          transform="translate(-115.07 -121.65)"/>
                    <path class="cls-7"
                          d="M490.66,677.22l-12.51-34.88a247.24,247.24,0,0,1-179.68-7.77l-14.94,33.9A284.21,284.21,0,0,0,490.66,677.22Z"
                          transform="translate(-115.07 -121.65)"/>
                    <path class="cls-8"
                          d="M397.77,636.72A231.74,231.74,0,0,1,167,416.54h-5.57A237.31,237.31,0,0,0,397.77,642.28Z"
                          transform="translate(-115.07 -121.65)"/>
                    <path class="cls-8"
                          d="M161.24,412.51h5.56a231.13,231.13,0,0,1,62.33-165.81l-3.93-3.93A236.63,236.63,0,0,0,161.24,412.51Z"
                          transform="translate(-115.07 -121.65)"/>
                    <path class="cls-8" d="M556.68,574.27A231,231,0,0,1,401.8,636.69v5.55a236.44,236.44,0,0,0,158.81-64Z"
                          transform="translate(-115.07 -121.65)"/>
                    <path class="cls-8"
                          d="M629.89,416.54a230.89,230.89,0,0,1-67.58,152.31c-.9.89-1.81,1.76-2.71,2.64l3.92,3.93c.91-.88,1.82-1.75,2.72-2.64a236.5,236.5,0,0,0,69.22-156.24Z"
                          transform="translate(-115.07 -121.65)"/>
                    <path class="cls-8"
                          d="M401.8,173.25A231.72,231.72,0,0,1,630.05,412.51h5.56A237.28,237.28,0,0,0,401.8,167.69Z"
                          transform="translate(-115.07 -121.65)"/>
                    <path class="cls-8"
                          d="M231.9,243.8c.88-.91,1.75-1.82,2.65-2.71a231,231,0,0,1,163.22-67.87v-5.56a236.53,236.53,0,0,0-167.15,69.5c-.9.89-1.77,1.8-2.65,2.71Z"
                          transform="translate(-115.07 -121.65)"/>
                </g>
                <path class="cls-6"
                      d="M256.24,649.76l20.53-29.38A245.17,245.17,0,0,1,195.51,265c-11.87-8.26-22.49-15.45-29.6-19.89-51.37,73.52-66.73,170.31-32.58,260.51A279.73,279.73,0,0,0,256.24,649.76Z"
                      transform="translate(-115.07 -121.65)"/>
                <circle class="cls-9" cx="282.71" cy="283.32" r="232.77"/>
            </g>
        </g>
        </g>
        </g>


{/*START*/}
<g transform = 'translate(1010, 155)' >

<g  transform='scale(1.2 1.2)'>
<TransitionGroup
 component="g"
// transform='translate(355 115)'
className="rd3t-g"

transform={`translate(${translate.x+1050},${translate.y+205})' `}
>
{links.map((linkData) =>
<Link
 key={uuid.v4()}
orientation={orientation}
pathFunc={pathFunc}
linkData={linkData}
transitionDuration={transitionDuration}
styles={styles.links}
/>
)}

{nodes.map((nodeData) =>


<Node
 key={nodeData.id}
orientation={orientation}
transitionDuration={transitionDuration}
textAnchor="start"
nodeData={nodeData}
name={nodeData.name}
attributes={nodeData.attributes}
onClick={this.handleNodeToggle}
circleRadius={circleRadius}
styles={styles.nodes}
percentage = {nodeData.percentage}
unlock = {nodeData.unlock}
depth = {nodeData.depth}
/>

)
}

</TransitionGroup>
  </g>
    </g>
    </g>

      {/*END*/}



</svg>
// </div>
);
}
}
function mapStateToProps(state) {
return {
    user: state.user,
    content: state.user.content
}
}




export default connect(mapStateToProps, {pointf,ChapterToStore, UserToStore, CourseToStore,refreshfetch,Activate})(Tree);

Tree.defaultProps = {
onClick: undefined,
orientation: 'vertical',
translate: { x: 0, y: 0 },
pathFunc: 'diagonal',
transitionDuration: 500,
depthFactor: undefined,
collapsible: false,
initialDepth: undefined,
zoomable: true,
percentage: 25,
scaleExtent: { min: 0.1, max: 1 },
nodeSize: { x: 100, y: 100 },
separation: { siblings: 1, nonSiblings: 2 },
circleRadius: 10,
styles: {},
};

Tree.propTypes = {
data: PropTypes.array.isRequired,
onClick: PropTypes.func,
orientation: PropTypes.oneOf([
'horizontal',
'vertical',
]),
translate: PropTypes.shape({
    x: PropTypes.number,
    y: PropTypes.number,
}),
pathFunc: PropTypes.oneOf([
'diagonal',
'elbow',
'straight',
]),
transitionDuration: PropTypes.number,
depthFactor: PropTypes.number,
collapsible: PropTypes.bool,
initialDepth: PropTypes.number,
zoomable: PropTypes.bool,
scaleExtent: PropTypes.shape({
    min: PropTypes.number,
    max: PropTypes.number,
}),
nodeSize: PropTypes.shape({
    x: PropTypes.number,
    y: PropTypes.number,
}),
separation: PropTypes.shape({
    siblings: PropTypes.number,
    nonSiblings: PropTypes.number,
}),
circleRadius: PropTypes.number,
styles: PropTypes.shape({
    nodes: PropTypes.object,
    links: PropTypes.object,
}),
};
